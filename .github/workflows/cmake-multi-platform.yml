name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: 
      image: ${{ matrix.container }}
      options: --user root
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        container: ["gcc:14", "jetbrains/qodana-clang:2024.2-eap-clang18"]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            container: "gcc:14"
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            container: "jetbrains/qodana-clang:2024.2-eap-clang18"
        exclude:
          - os: ubuntu-latest
            c_compiler: gcc
            container: "jetbrains/qodana-clang:2024.2-eap-clang18"
          - os: ubuntu-latest
            c_compiler: clang
            container: "gcc:14"

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - uses: actions/setup-python@v4
      with:
        python-version: '3.12' 
    - uses: insightsengineering/pip-action@v2
      with:
        packages: |
          conan
    - name: cat profile
      run: cat ${{ github.workspace }}/conan/profiles/release-${{ matrix.c_compiler }}
      
    - name: Install dependencies via Conan
      run: >
        conan install . --output-folder=${{ steps.strings.outputs.build-output-dir }} --build=missing --profile:host=${{ github.workspace }}/conan/profiles/release-${{ matrix.c_compiler }}
        --profile:build=${{ github.workspace }}/conan/profiles/release-${{ matrix.c_compiler }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        --preset conan-release
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
